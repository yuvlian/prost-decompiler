// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct One {
    /// Basic signed 32-bit integer
    #[prost(int32, tag = "1")]
    pub id: i32,
    /// Signed integer with ZigZag encoding for negative numbers
    #[prost(sint32, tag = "2")]
    pub signed_id: i32,
    /// Unsigned 32-bit integer
    #[prost(uint32, tag = "3")]
    pub unsigned_id: u32,
    /// UTF-8 encoded string
    #[prost(string, tag = "4")]
    pub name: ::prost::alloc::string::String,
    /// Boolean value
    #[prost(bool, tag = "5")]
    pub is_active: bool,
    /// 64-bit floating point number
    #[prost(double, tag = "6")]
    pub balance: f64,
    /// 32-bit floating point number
    #[prost(float, tag = "7")]
    pub rating: f32,
    /// Arbitrary sequence of bytes
    #[prost(bytes = "vec", tag = "8")]
    pub data_blob: ::prost::alloc::vec::Vec<u8>,
    /// 32-bit fixed-size integer
    #[prost(fixed32, tag = "9")]
    pub fixed_value: u32,
    /// Signed 32-bit fixed-size integer
    #[prost(sfixed32, tag = "10")]
    pub signed_fixed_value: i32,
    /// Repeated field with 32-bit floating point values
    #[prost(float, repeated, tag = "11")]
    pub values: ::prost::alloc::vec::Vec<f32>,
    /// A map of string to signed 32-bit integers
    #[prost(map = "string, int32", tag = "12")]
    pub key_value_pairs: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        i32,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Two {
    /// Custom type (Message One)
    #[prost(message, optional, tag = "1")]
    pub one_field: ::core::option::Option<One>,
    /// Custom type (Enum Status)
    #[prost(enumeration = "Status", tag = "2")]
    pub status: i32,
    /// Signed 64-bit integer
    #[prost(sint64, tag = "6")]
    pub long_signed_id: i64,
    /// Unsigned 64-bit integer
    #[prost(uint64, tag = "7")]
    pub long_unsigned_id: u64,
    /// Fixed-size 64-bit integer
    #[prost(fixed64, tag = "8")]
    pub long_fixed_value: u64,
    /// Signed fixed-size 64-bit integer
    #[prost(sfixed64, tag = "9")]
    pub long_signed_fixed_value: i64,
    /// Oneof with 3 elements
    #[prost(oneof = "two::Choice", tags = "3, 4, 5")]
    pub choice: ::core::option::Option<two::Choice>,
}
/// Nested message and enum types in `Two`.
pub mod two {
    /// Oneof with 3 elements
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Choice {
        #[prost(string, tag = "3")]
        TextOption(::prost::alloc::string::String),
        #[prost(int32, tag = "4")]
        NumberOption(i32),
        #[prost(bool, tag = "5")]
        BooleanOption(bool),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct NestedMessage {
    /// Signed 32-bit integer
    #[prost(int32, tag = "1")]
    pub nested_id: i32,
    /// UTF-8 encoded string
    #[prost(string, tag = "2")]
    pub nested_data: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum Status {
    Unknown = 0,
    Active = 1,
    Inactive = 2,
}
impl Status {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Status::Unknown => "UNKNOWN",
            Status::Active => "ACTIVE",
            Status::Inactive => "INACTIVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "UNKNOWN" => Some(Self::Unknown),
            "ACTIVE" => Some(Self::Active),
            "INACTIVE" => Some(Self::Inactive),
            _ => None,
        }
    }
}
